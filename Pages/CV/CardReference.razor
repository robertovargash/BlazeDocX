@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Class="mt-2 ml-2" Typo="Typo.h6">References</MudText>

@if (!editing_references)
{
    <MudButton OnClick="(() => editing_references = adding_references = true)" Class="mt-2" Variant="Variant.Text" Color="Color.Primary">New</MudButton>

    @foreach (var reference in cv.References)
    {
        <MudPaper Outlined="true" Class="mt-1 d-flex align-center pa-2">
            <MudGrid Class="m-1">
                <MudItem Class="d-none d-sm-flex align-self-center cursor-pointer" @onclick="@(() => EditReference(reference))">
                    <MudAvatar Color="Color.Primary">@reference.CompanyName.ToString()[0].ToString().ToUpper()</MudAvatar>
                </MudItem>
                <MudItem Class="align-self-center cursor-pointer" Style="width: 70%;" @onclick="@(() => EditReference(reference))">
                    <MudGrid>
                        <MudItem>
                            <MudText Typo="Typo.subtitle2"><b>@reference.PersonName</b> <u>@reference.Email</u></MudText>
                            <MudText Typo="Typo.subtitle2">@reference.CompanyName</MudText>
                            <MudText Typo="Typo.caption">@reference.Occupation</MudText>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudSpacer />
                <MudItem Class="align-self-center pa-1" Style="width: 50px; height: 50px;">
                    <MudIconButton @onclick="@(() => DeleteReference(reference))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
}
else
{
    <MudButton Variant="Variant.Text" OnClick="Cancel" Color="Color.Primary">Back</MudButton>
    <EditForm OnValidSubmit="AddReference" Model="@reference_model" class="mt-2">
        <DataAnnotationsValidator />
        <MudCard Elevation="0">
            <MudCardContent>
                <MudTextField T="string" For="@(() => reference_model.PersonName)" Label="Name" @bind-Value="@reference_model.PersonName" />
                <MudTextField T="string" Label="Occupation" For="@(() => reference_model.Occupation)" @bind-Value="@reference_model.Occupation" />
                <MudTextField T="string" For="@(() => reference_model.CompanyName)" Label="Company name" @bind-Value="@reference_model.CompanyName" />
                <MudTextField T="string" Label="Email" For="@(() => reference_model.Email)" @bind-Value="@reference_model.Email" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">ACCEPT</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}


@code {
    bool adding_references, editing_references = false;
    private WorkReference reference_model = new WorkReference();
    [Parameter] public CV cv { get; set; }

    async Task Cancel()
    {
        adding_references = false;
        editing_references = false;
        reference_model = new WorkReference();
    }

    async Task AddReference()
    {
        try
        {
            if (adding_references)
            {
                cv.References.Add(reference_model);
                reference_model = new WorkReference();
                adding_references = false;
                editing_references = false;
                Snackbar.Add("Reference inserted", MudBlazor.Severity.Success);
            }
            if (editing_references)
            {
                editing_references = false;
                adding_references = false;
                reference_model = new WorkReference();
                Snackbar.Add("Reference updated", MudBlazor.Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    async Task EditReference(WorkReference item)
    {
        adding_references = false;
        editing_references = true;
        reference_model = item;
    }

    async Task DeleteReference(WorkReference item)
    {
        var parameters = new DialogParameters
            {
                ["P_reference"] = item,
                ["Operation"] = "DELETE",
                ["ReadOnly"] = true,
            };
        var dialog = DialogService.Show<WorkreferenceDataDialog>("Deleting reference", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            cv.References.Remove(item);
        }
    }

}
