@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject StorageManager manage
@inject I18nText translator

<MudText Class="mt-2 ml-2" Typo="Typo.h6">@myText.Card_References</MudText>
@if (cv.References.Count == 0)
{
    adding_references = editing_references = true;
    <EditForm OnValidSubmit="AddReference" Model="@reference_model">
        <DataAnnotationsValidator />
        <MudCard Elevation="0">
            <MudCardContent>
                <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.PersonOutline" T="string" For="@(() => reference_model.PersonName)" Label="@myText.Employer" @bind-Value="@reference_model.PersonName" />
                <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Rounded.Cases" T="string" Label="@myText.Employer_position" For="@(() => reference_model.Occupation)" @bind-Value="@reference_model.Occupation" />
                <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Factory" T="string" For="@(() => reference_model.CompanyName)" Label="@myText.Company_name" @bind-Value="@reference_model.CompanyName" />
                <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Rounded.AlternateEmail" T="string" Label="@myText.Email" For="@(() => reference_model.Email)" @bind-Value="@reference_model.Email" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">@myText.Btn_Accept</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}
else
{
    @if (!editing_references)
    {
        <MudButton OnClick="(() => editing_references = adding_references = true)" Class="mt-2" Variant="Variant.Text" Color="Color.Primary">@myText.Btn_New</MudButton>

        @foreach (var reference in cv.References)
        {
            <MudPaper Outlined="true" Class="mt-1 d-flex align-center pa-2">
                <MudGrid Class="m-1">
                    <MudItem Class="d-none d-sm-flex align-self-center cursor-pointer" @onclick="@(() => EditReference(reference))">
                        <MudAvatar Color="Color.Primary">@reference.CompanyName.ToString()[0].ToString().ToUpper()</MudAvatar>
                    </MudItem>
                    <MudItem Class="align-self-center cursor-pointer" Style="width: 70%;" @onclick="@(() => EditReference(reference))">
                        <MudGrid>
                            <MudItem>
                                <MudText Typo="Typo.subtitle2"><b>@reference.PersonName</b> <u>@reference.Email</u></MudText>
                                <MudText Typo="Typo.subtitle2">@reference.CompanyName</MudText>
                                <MudText Typo="Typo.caption">@reference.Occupation</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudSpacer />
                    <MudItem Class="align-self-center pa-1" Style="width: 50px; height: 50px;">
                        <MudIconButton @onclick="@(() => DeleteReference(reference))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }
    }
    else
    {
        <MudButton Variant="Variant.Text" OnClick="Cancel" Color="Color.Primary">@myText.Btn_back</MudButton>
        <EditForm OnValidSubmit="AddReference" Model="@reference_model">
            <DataAnnotationsValidator />
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.PersonOutline" T="string" For="@(() => reference_model.PersonName)" Label="@myText.Employer" @bind-Value="@reference_model.PersonName" />
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Rounded.Cases" T="string" Label="@myText.Employer_position" For="@(() => reference_model.Occupation)" @bind-Value="@reference_model.Occupation" />
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Factory" T="string" For="@(() => reference_model.CompanyName)" Label="@myText.Company_name" @bind-Value="@reference_model.CompanyName" />
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Rounded.AlternateEmail" T="string" Label="@myText.Email" For="@(() => reference_model.Email)" @bind-Value="@reference_model.Email" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">@myText.Btn_Accept</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
}

@code {
    Text myText = new Text();

    protected override async Task OnInitializedAsync()
    {
        myText = await translator.GetTextTableAsync<Text>(this);
    }
    bool adding_references, editing_references = false;
    private WorkReference reference_model = new WorkReference();
    [Parameter] public CV cv { get; set; }

    async Task Cancel()
    {
        adding_references = false;
        editing_references = false;
        reference_model = new WorkReference();
    }

    async Task AddReference()
    {
        try
        {
            if (adding_references)
            {
                cv.References.Add(reference_model);
                reference_model = new WorkReference();
                adding_references = false;
                editing_references = false;
                Snackbar.Add("Reference inserted", MudBlazor.Severity.Success);
            }
            if (editing_references)
            {
                editing_references = false;
                adding_references = false;
                reference_model = new WorkReference();
                Snackbar.Add("Reference updated", MudBlazor.Severity.Warning);
            }
            await manage.SaveCVData(cv);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    async Task EditReference(WorkReference item)
    {
        adding_references = false;
        editing_references = true;
        reference_model = item;
    }

    async Task DeleteReference(WorkReference item)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"{myText.Delete_message} work reference?");
        parameters.Add("ButtonText", myText.Btn_delete);
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteItemDialog>(myText.Header_Delete, parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            cv.References.Remove(item);
            await manage.SaveCVData(cv);
            Snackbar.Add("Reference deleted", MudBlazor.Severity.Error);
        }
    }

}
