@page "/normal"
@inject IJSRuntime jsRuntime
@inject CVCreator cvCreator
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<MudGrid Style="position:fixed;">
    <MudItem xs="12">
        <MudToolBar>
            <MudSpacer />
            <MudFab StartIcon="@Icons.Filled.Save" Color="Color.Primary" Disabled="@(!cvform_valid)" Label="Save CV" OnClick="SaveChanges" />
        </MudToolBar>
    </MudItem>
</MudGrid>
<MudContainer Style="margin-top: 64px">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudTabs Outlined="true" Position="Position.Bottom" Rounded="true" Border="true" ApplyEffectsToContainer="true" PanelClass="pa-2">
                <MudTabPanel Text="Contact info">
                    <MudCard Outlined=true>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText><b>CV Details</b></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudForm @bind-IsValid="@cvform_valid" Model="@cv" ValidationDelay="0">
                                <MudCard Elevation="0">
                                    <MudCardContent>
                                        <MudTextField For="@(() => cv.FirstName)" @bind-Value="cv.FirstName" Label="First Name" />
                                        <MudTextField For="@(() => cv.LastName)" @bind-Value="cv.LastName" Label="Last Name" />
                                        <MudTextField For="@(() => cv.Occupation)" @bind-Value="cv.Occupation" Label="Occupation" />
                                        <MudTextField For="@(() => cv.Email)" @bind-Value="cv.Email" Label="Email" InputType="InputType.Email" />
                                    </MudCardContent>
                                </MudCard>
                            </MudForm>
                        </MudCardContent>
                    </MudCard>
                </MudTabPanel>
                <MudTabPanel Text="Summary">
                    <CardSummary cv="cv"/>
                </MudTabPanel>
                <MudTabPanel Text="Experience">
                    <CardExperience cv="cv"/>
                </MudTabPanel>
                <MudTabPanel Text="Education">
                    <CardEducation cv="cv"/>
                </MudTabPanel>
                <MudTabPanel Text="Skills">
                    <CardSkill cv="cv"/>
@*                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Skills list</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (cv.Skills.Count > 0)
                            {
                                <MudTable OnCommitEditClick="@(() => Snackbar.Add("Edited successfully", MudBlazor.Severity.Success))" CanCancelEdit="true"
                                      RowEditPreview="@BackupSkill" RowEditCancel="@ResetSkillToOriginalValues" RowEditCommit="@SkillHasBeenCommitted"
                                      Elevation="0" GroupBy="@_groupDefinition" GroupHeaderStyle="background-color:var(--mud-palette-background-grey)" Items="@cv.Skills" Hover="true" LoadingProgressColor="Color.Info">
                                    <HeaderContent>
                                        <MudTh>#</MudTh>
                                        <MudTh>Skill Name</MudTh>
                                        <MudTh>Description</MudTh>
                                        <MudTh></MudTh>
                                    </HeaderContent>
                                    <GroupHeaderTemplate>
                                        <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"Type: {context.Key}")</MudTh>
                                        </GroupHeaderTemplate>
                                        <RowTemplate>
                                            <MudTd DataLabel="Id">@GetSkillsRowNumber(context)</MudTd>
                                            <MudTd DataLabel="Name">@context.Name</MudTd>
                                            <MudTd DataLabel="Description">@context.Description</MudTd>
                                            <MudTd>
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="@((e) => DeleteSkill(context))" Color="Color.Primary"></MudIconButton>
                                            </MudTd>
                                        </RowTemplate>
                                        <RowEditingTemplate>
                                            <MudTd DataLabel="#">@GetSkillsRowNumber(context)</MudTd>
                                            <MudTd DataLabel="Tag Name">
                                                <MudTextField @bind-Value="@context.Tag" Required />
                                            </MudTd>
                                            <MudTd DataLabel="Name">
                                                <MudTextField @bind-Value="@context.Name" Required />
                                            </MudTd>
                                            <MudTd DataLabel="Description">
                                                <MudTextField Lines="3" @bind-Value="@context.Description" Required />
                                            </MudTd>
                                        </RowEditingTemplate>
                                    </MudTable>
                            }
                            <EditForm OnValidSubmit="AddSkill" Model="@skill_model">
                                <DataAnnotationsValidator />
                                <MudCard Elevation="0">
                                    <MudCardContent>
                                        <MudTextField T="string" For="@(() => skill_model.Tag)" Label="Tag" @bind-Value="@skill_model.Tag" />
                                        <MudTextField T="string" For="@(() => skill_model.Name)" Label="Skill name" @bind-Value="@skill_model.Name" />
                                        <MudTextField Lines="3" T="string" Label="Details" For="@(() => skill_model.Description)" @bind-Value="@skill_model.Description" />
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">Add skill</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </EditForm>
                        </MudCardContent>
                    </MudCard>
*@                </MudTabPanel>
                <MudTabPanel Text="References">
                    <CardReference cv="cv"/>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudPaper Height="100%" Width="100%">
                <MudContainer Fixed="true">
                    <MudPaper Height="100%" Width="100%" Square="true" Class="mud-theme-primary"></MudPaper>
                </MudContainer>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    //Profile _profile = new();
    bool cvform_valid = false;
    public bool Saving { get; set; }
    CV cv = new();

    public int? GetSkillsRowNumber(object element) => cv.Skills?.TakeWhile(x => x != element).Count() + 1;
        
    private Skill skill_model = new Skill();
    private WorkReference reference_model = new WorkReference();

    private TableGroupDefinition<Skill> _groupDefinition = new()
        {
            GroupName = "Group",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.Tag
        };


    IList<IBrowserFile> files = new List<IBrowserFile>();
    bool loadingPicture = false;

    //private async void UploadFiles(InputFileChangeEventArgs e)
    //{
    //    if (e.File is not null)
    //    {
    //        loadingPicture = true;
    //        _profile.Picture = await profileCreator.GetImageBase64(e.File);
    //        StateHasChanged();
    //        loadingPicture = false;
    //    }
    //}
    private List<string> editEvents = new();
    private Skill skillBeforeEdit;
    #region Summary

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }
    #endregion

    #region Skills
    private void BackupSkill(object element)
    {
        skillBeforeEdit = new()
            {
                Tag = ((Skill)element).Tag,
                Name = ((Skill)element).Name,
                Description = ((Skill)element).Description,
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Skill {((Skill)element).Name}");
    }

    private void SkillHasBeenCommitted(object element)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Skill {((Skill)element).Name} committed");
    }

    private void ResetSkillToOriginalValues(object element)
    {
        ((Skill)element).Tag = skillBeforeEdit.Tag;
        ((Skill)element).Name = skillBeforeEdit.Name;
        ((Skill)element).Description = skillBeforeEdit.Description;
        AddEditionEvent($"RowEditCancel event: Editing of skill {((Skill)element).Name} cancelled");
    }
    async Task AddSkill()
    {
        try
        {
            cv.Skills.Add(skill_model);
            skill_model = new Skill() { Tag = skill_model.Tag };
            Snackbar.Add("Skill inserted", MudBlazor.Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    async Task DeleteSkill(Skill item)
    {
        var parameters = new DialogParameters
            {
                ["P_skill"] = item,
                ["Operation"] = "DELETE",
                ["ReadOnly"] = true,
            };
        var dialog = DialogService.Show<SkillDataDialog>("Deleting skill", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            int Id = ((Skill)result.Data).Id;
            Skill? we = cv.Skills.Find(r => r.Id == Id);
            if (we != null)
            {
                cv.Skills.Remove(we);
            }
        }
    }
    #endregion

    #region References
    
    #endregion

    async Task SaveChanges()
    {
        Saving = true;
        await cvCreator.Create(cv);
        Saving = false;
    }
}
