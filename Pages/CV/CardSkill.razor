@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject StorageManager manage
@inject I18nText translator

<MudText Class="mt-2 ml-2" Typo="Typo.h6">@myText.Card_Skills</MudText>
@if (cv.Skills.Count == 0)
{
    adding_skill = editing_skill = true;
    <EditForm OnValidSubmit="AddSkill" Model="@skill_model">
        <DataAnnotationsValidator />
        <MudCard Elevation="0">
            <MudCardContent>
                <MudTextField Adornment="Adornment.Start" HelperText="@myText.Helper_skill_tag" AdornmentIcon="@Icons.Filled.Tag" T="string" For="@(() => skill_model.Tag)" Label="@myText.Tag" @bind-Value="@skill_model.Tag" />
                <MudTextField Adornment="Adornment.Start" HelperText="@myText.Helper_skill" AdornmentIcon="@Icons.Filled.AutoFixHigh" T="string" Label="@myText.Skill" For="@(() => skill_model.Name)" @bind-Value="@skill_model.Name" />
                <MudTextField Adornment="Adornment.Start" HelperText="@myText.Helper_skill_details"  AdornmentIcon="@Icons.Filled.Description" T="string" Lines="3" For="@(() => skill_model.Description)" Label="@myText.Description" @bind-Value="@skill_model.Description" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">@myText.Btn_Accept</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}
else
{
    @if (!editing_skill)
    {
        <MudButton OnClick="(() => editing_skill = adding_skill = true)" Class="mt-2" Variant="Variant.Text" Color="Color.Primary">@myText.Btn_New</MudButton>
        @foreach (var keyword in cv.Skills.GroupBy(w => w.Tag).Select(g => new { keyword = g.Key, Tag = g.Select(c => c.Tag) }))
        {
            <MudDivider class="invisible" />
            <MudChip Label="true" Class="cursor-pointer" @onclick="@(() => AddingSkill(keyword.keyword.ToString()))" Color="Color.Primary">@keyword.keyword.ToString()</MudChip>
            foreach (var skill in cv.Skills.Where(s => s.Tag == keyword.keyword.ToString()).ToList())
            {
                <MudPaper Outlined="true" Class="mt-1 d-flex align-center pa-2">
                    <MudGrid Class="m-1">
                        <MudItem Class="d-none d-sm-flex align-self-center cursor-pointer" @onclick="@(() => EditSkill(skill))">
                            <MudAvatar Color="Color.Primary">@skill.Name.ToString()[0].ToString().ToUpper()</MudAvatar>
                        </MudItem>
                        <MudItem Class="align-self-center cursor-pointer" Style="width: 70%;" @onclick="@(() => EditSkill(skill))">
                            <MudGrid>
                                <MudItem>
                                    <MudText Typo="Typo.subtitle2"><b>@skill.Name</b></MudText>
                                    <MudText Typo="Typo.subtitle2">@skill.Description</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudSpacer />
                        <MudItem Class="align-self-center pa-1" Style="width: 50px; height: 50px;">
                            <MudIconButton @onclick="@(() => DeleteSkill(skill))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" />
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        }
    }
    else
    {
        <MudButton Variant="Variant.Text" OnClick="Cancel" Color="Color.Primary">@myText.Btn_back</MudButton>
        <EditForm OnValidSubmit="AddSkill" Model="@skill_model">
            <DataAnnotationsValidator />
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudTextField Adornment="Adornment.Start" HelperText="@myText.Helper_skill_tag" AdornmentIcon="@Icons.Filled.Tag" T="string" For="@(() => skill_model.Tag)" Label="@myText.Tag" @bind-Value="@skill_model.Tag" />
                    <MudTextField Adornment="Adornment.Start" HelperText="@myText.Helper_skill" AdornmentIcon="@Icons.Filled.AutoFixHigh" T="string" Label="@myText.Skill" For="@(() => skill_model.Name)" @bind-Value="@skill_model.Name" />
                    <MudTextField Adornment="Adornment.Start" HelperText="@myText.Helper_skill_details" AdornmentIcon="@Icons.Filled.Description" T="string" Lines="3" For="@(() => skill_model.Description)" Label="@myText.Description" @bind-Value="@skill_model.Description" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">@myText.Btn_Accept</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
}

@code {

    Text myText = new Text();

    protected override async Task OnInitializedAsync()
    {
        myText = await translator.GetTextTableAsync<Text>(this);
    }

    bool adding_skill, editing_skill = false;
    private Skill skill_model = new Skill();
    string last_tag;
    [Parameter] public CV cv { get; set; }

    async Task Cancel()
    {
        adding_skill = false;
        editing_skill = false;
        skill_model = new Skill();
    }

    async Task AddingSkill(string tag)
    {
        skill_model = new Skill() { Tag = tag };
        adding_skill = true;
        editing_skill = true;
    }


    async Task AddSkill()
    {
        try
        {
            if (adding_skill)
            {
                cv.Skills.Add(skill_model);
                last_tag = skill_model.Tag;
                skill_model = new Skill();
                adding_skill = false;
                editing_skill = false;
                Snackbar.Add(myText.Skill_inserted, MudBlazor.Severity.Success);
            }
            if (editing_skill)
            {
                editing_skill = false;
                adding_skill = false;
                skill_model = new Skill();
                Snackbar.Add(myText.Skill_updated, MudBlazor.Severity.Warning);
            }
            await manage.SaveCVData(cv);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    async Task EditSkill(Skill item)
    {
        adding_skill = false;
        editing_skill = true;
        skill_model = item;
    }

    async Task DeleteSkill(Skill item)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", myText.Delete_skill);
        parameters.Add("ButtonText", myText.Btn_delete);
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteItemDialog>(myText.Header_Delete, parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            cv.Skills.Remove(item);
            await manage.SaveCVData(cv);
            Snackbar.Add(myText.Skill_deleted, MudBlazor.Severity.Error);
        }
    }

}

