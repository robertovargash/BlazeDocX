    @inject IDialogService DialogService
    @inject ISnackbar Snackbar

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Resume Summary</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (!editing_summary)
        {
            foreach (var summary in cv.ResumeSummary)
            {
                <MudCard Outlined="true" Class="mt-1">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Primary">@summary.Summary.ToString()[0].ToString().ToUpper()</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@summary.Summary</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton @onclick="@(() => EditSummaryItem(summary))" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                            <MudIconButton @onclick="@(() => DeleteSummaryItem(summary))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" />
                        </CardHeaderActions>
                    </MudCardHeader>
                </MudCard>
            }
            <MudButton OnClick="@(() => Cancel())" Class="mt-2" Variant="Variant.Text" Color="Color.Primary">New</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Text" OnClick="(() => editing_summary = adding_summary = false)" Color="Color.Primary">Back</MudButton>
            <EditForm Model="@summary_model" OnValidSubmit="AddSummaryItem" class="mt-2">
                <DataAnnotationsValidator />
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudTextField T="string" For="@(() => summary_model.Summary)" Label="Summary item" @bind-Value="@summary_model.Summary" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">ACCEPT</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        }
    </MudCardContent>
</MudCard>


@code {
    bool editing_summary, adding_summary = false;
    private ResumeItem summary_model = new ResumeItem();
    [Parameter] public CV cv{ get; set; }

    async Task Cancel(){
        adding_summary = false;
        editing_summary = false;
        summary_model = new ResumeItem();
    }

    async Task AddSummaryItem()
    {
        try
        {
            if (adding_summary)
            {
                cv.ResumeSummary.Add(summary_model);
                summary_model = new ResumeItem();
                editing_summary = false;
                Snackbar.Add("Summary inserted", MudBlazor.Severity.Success);
            }
            if (editing_summary)
            {
                editing_summary = false;
                summary_model = new ResumeItem();
                Snackbar.Add("Summary updated", MudBlazor.Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    async Task EditSummaryItem(ResumeItem item)
    {
    }

    async Task DeleteSummaryItem(ResumeItem item)
    {
        var parameters = new DialogParameters
            {
                ["P_resume"] = item,
                ["Operation"] = "DELETE",
                ["ReadOnly"] = true
            };
        var dialog = DialogService.Show<SummaryDataDialog>("Deleting Summary item", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            cv.ResumeSummary.Remove(item);
        }
    }
}
