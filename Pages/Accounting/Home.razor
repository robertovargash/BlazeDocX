@page "/workbooksample"
@inject IJSRuntime jsRuntime
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILocalStorageService localStorage
@inject StorageManager manage
@inject WorkBookCreator workbook_creator;
@inject NavigationManager NavManager
@inject I18nText translator


<PageTitle>@Title</PageTitle>
<MudGrid Style="position:fixed; top:64px;">
    <MudContainer Class="mt-3">
        <MudToolBar>
            <MudAvatar Size="Size.Large" Class="cursor-pointer" Image="images/words.jpg" @onclick="GoToWords" />
            <MudSpacer />
            <MudFab StartIcon="@Icons.Filled.Autorenew" Class="mr-2" Color="Color.Secondary" OnClick="RemoveData" />
            <MudFab StartIcon="@Icons.Filled.CloudDownload" Color="Color.Primary" OnClick="SaveExcel" />
        </MudToolBar>
    </MudContainer>
</MudGrid>
@if (!income_visible && !expense_visible && !charts_visible)
{
    <div id="content" style="position:absolute; top:128px; bottom:0px; left:0px; right:0px; overflow:auto;">
        <MudContainer>
            <MudGrid>
                <MudItem xs="12" sm="12" md="6">
                    <MudPaper Class="pa-6 mx-1 mt-1 cursor-pointer" Outlined="true" onclick="@(() => ShowIncome())">
                        <MudStack>
                            <MudText Typo="Typo.h5" Color="Color.Success">@myText.Incomes</MudText>
                            <MudPaper Elevation="0">
                                <MudStack Row="true">
                                    <MudText Typo="Typo.h5" Color="Color.Success">@CalculateIncomes()</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="12" md="6">
                    <MudPaper Class="pa-6 mx-1 mt-1 cursor-pointer" Outlined="true" onclick="@(() => ShowExpense())">
                        <MudStack>
                            <MudText Typo="Typo.h5" Color="Color.Secondary">@myText.Expenses</MudText>
                            <MudPaper Elevation="0">
                                <MudStack Row="true">
                                    <MudText Typo="Typo.h5" Color="Color.Secondary">@CalculateExpenses()</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Class="pa-6 mx-1 mt-1 cursor-pointer" Outlined="true" onclick="@(() => ShowCharts())">
                        <MudGrid>
                            <MudItem Class="align-self-center">
                                <MudIcon Size="Size.Large" Class="d-inline" Icon="@Icons.Material.Filled.BarChart" />
                            </MudItem>
                            <MudItem Class="align-self-center">
                                <MudText Typo="Typo.h5" Class="d-inline">@myText.Charts</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </div>
    <div id="footer" style="position:absolute; bottom:0px; height:0px; left:0px; right:0px; overflow:hidden;">
    </div>
}
@if (income_visible && !menu_visible)
{
    <CardIncome accounting="accounting" GoBack="GoBack" />
    <AccountingFooter GoBack="GoToIncome" GoForward="GoToExpense" ForwardColor="Color.Error" Visibleback="invisible" Visibleforward="" Textback="" Textforward="@myText.Expenses" />
}
@if (expense_visible && !menu_visible)
{
    <CardExpense accounting="accounting" GoBack="GoBack" />
    <AccountingFooter GoBack="GoToIncome" GoForward="GoToExpense" BackColor="Color.Success" Textback="@myText.Incomes" Textforward="" Visibleback="" Visibleforward="invisible" />
}
@if (charts_visible && !menu_visible)
{
    <CardCharts accounting="accounting" GoBack="GoBack" />
}

@code {
    private const string ACCOUNT_LOCAL_STORAGE = "accounting";
    bool income_visible, expense_visible, charts_visible;
    bool menu_visible = true;
    public Accounting accounting { get; set; } = new Accounting();
    private string Title = "Workbooks";

    [CascadingParameter]
    public MainLayout Layout { get; set; }
    Text myText = new Text();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Layout.Title = Title;
            accounting = await localStorage.GetItemAsync<Accounting>(ACCOUNT_LOCAL_STORAGE);
            myText = await translator.GetTextTableAsync<Text>(this);
            if (accounting == null)
            {
                accounting = new Accounting();
                await localStorage.SetItemAsync(ACCOUNT_LOCAL_STORAGE, accounting);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    public string CalculateIncomes()
    {
        decimal sum_income = accounting.Incomes.Select(t => t.Amount).Sum();
        return sum_income.ToString("C2");
    }

    public string CalculateExpenses()
    {
        decimal sum_income = accounting.Expenses.Select(t => t.Amount).Sum();
        return sum_income.ToString("C2");
    }

    #region MenuFunctions
    async Task ShowIncome()
    {
        income_visible = true;
        menu_visible = false;
    }
    async Task ShowExpense()
    {
        expense_visible = true;
        menu_visible = false;
    }
    async Task ShowCharts()
    {
        charts_visible = true;
        menu_visible = false;
    }
    async Task GoBack()
    {
        menu_visible = true;
        income_visible = expense_visible = charts_visible = false;
    }
    #endregion

    #region Navigation
    async Task GoToIncome()
    {
        await GoBack();
        await ShowIncome();
    }

    async Task GoToExpense()
    {
        await GoBack();
        await ShowExpense();
    }

    async Task GoToCharts()
    {
        await GoBack();
        await ShowCharts();
    }
    #endregion

    async Task RemoveData()
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", myText.Remove_data_message);
            parameters.Add("ButtonText", myText.Btn_delete);
            parameters.Add("Color", Color.Error);

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            var dialog = DialogService.Show<DeleteItemDialog>(myText.Header_Delete, parameters, options);
            //var dialog = DialogService.Show<EducationDataDialog>("Deleting account", parameters);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                await manage.RemoveAccountingData(accounting);
                accounting = new Accounting();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    async Task SaveExcel()
    {
        try
        {
            await workbook_creator.CreateWorkbook(accounting);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void GoToWords()
    {
        NavManager.NavigateTo("/wordsample");
    }
}
