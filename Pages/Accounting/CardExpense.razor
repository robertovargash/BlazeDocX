@using System.Globalization;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject StorageManager manage
@inject I18nText translator

<div id="content" style="position:absolute; top:128px; bottom:64px; left:0px; right:0px; overflow:auto;">
    <MudContainer>
        <MudPaper Elevation="0" Class="ma-1">
            <MudIconButton Icon="@Icons.Filled.Menu" aria-label="menu" Class="mt-2" OnClick="GoBack" />
            <MudPaper Class="mt-2 mb-2 pa-2 mud-theme-secondary">
                <MudText Typo="Typo.h6">@myText.Expenses</MudText>
            </MudPaper>
            @if (accounting.Expenses.Count == 0)
            {
                adding_expense = editing_expense = true;
                <EditForm OnValidSubmit="AddExpense" Model="@expense_model">
                    <DataAnnotationsValidator />
                    <MudCard Elevation="0">
                        <MudCardContent>
                            <MudSelect @bind-Value="expense_model.Category" Label="@myText.Select_category" OpenIcon="@Icons.Filled.CurrencyExchange" AdornmentColor="Color.Primary">
                                <MudSelectItem Value="@myText.Expense_Entertaiment" />
                                <MudSelectItem Value="@myText.Expense_Education" />
                                <MudSelectItem Value="@myText.Expense_Purchase" />
                                <MudSelectItem Value="@myText.Expense_Personal" />
                                <MudSelectItem Value="@myText.Expense_Health" />
                                <MudSelectItem Value="@myText.Expense_Invest" />
                                <MudSelectItem Value="@myText.Expense_Kids" />
                                <MudSelectItem Value="@myText.Expense_Invoices" />
                                <MudSelectItem Value="@myText.Expense_Taxes" />
                                <MudSelectItem Value="@myText.Expense_Services" />
                                <MudSelectItem Value="@myText.Expense_Food" />
                                <MudSelectItem Value="@myText.Expense_Travel" />
                                <MudSelectItem Value="@myText.Expense_Home" />
                                <MudSelectItem Value="@myText.Expense_Electricity" />
                                <MudSelectItem Value="@myText.Expense_Communications" />
                            </MudSelect>
                            <MudTextField Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.AttachMoney" AdornmentColor="Color.Primary" T="decimal" For="@(() => expense_model.Amount)" Label="@myText.Ammount" @bind-Value="@expense_model.Amount" />
                            <MudDatePicker DisableToolbar="true" DateFormat="dd/MM/yyyy" Placeholder="@myText.Select_Date" Editable="true" Label="@myText.Date" For="@(() => expense_model.Date)" @bind-Date="@expense_model.Date" AdornmentColor="Color.Primary" />
                            <MudTextField Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Description" T="string" Lines="3" For="@(() => expense_model.Details)" Label="@myText.Details" @bind-Value="@expense_model.Details" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">@myText.Btn_Accept</MudButton>
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            }
            else
            {
                @if (!editing_expense)
                {
                    <MudButton OnClick="(() => editing_expense = adding_expense = true)" Class="mt-2" Variant="Variant.Text" Color="Color.Primary">New</MudButton>
                    <MudList Clickable="true" Class="m-1">
                        @foreach (var expense in accounting.Expenses)
                        {
                            <MudDivider />
                            <MudListItem Text="Inbox" OnClick="@(() => EditExpense(expense))">
                                <MudGrid Class="m-1">
                                    <MudItem Class="align-self-center cursor-pointer">
                                        <MudAvatar Color="Color.Primary">
                                            @CultureInfo.CurrentCulture.NumberFormat.CurrencySymbol.ToString()
                                        </MudAvatar>
                                    </MudItem>
                                    <MudItem Class="align-self-center cursor-pointer" Style="width: 60%;">
                                        <MudText Typo="Typo.subtitle2">
                                            <b>@expense.Category</b> @(expense.Date != null ? ((DateTime)expense.Date).ToString("d") : "No Date")
                                        </MudText>
                                        <MudText Typo="Typo.subtitle2">@expense.Amount.ToString("C2")</MudText>
                                    </MudItem>
                                    <MudSpacer />
                                    <MudItem Class="align-self-center pa-1" Style="width: 50px; height: 50px;">
                                        <MudIconButton @onclick="@(() => DeleteExpense(expense))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" />
                                    </MudItem>
                                </MudGrid>
                            </MudListItem>
                        }
                        <MudDivider />
                    </MudList>
                }
                else
                {
                    <MudButton Variant="Variant.Text" OnClick="@(() => Cancel())" Color="Color.Primary">@myText.Btn_back</MudButton>
                    <EditForm OnValidSubmit="AddExpense" Model="@expense_model">
                        <DataAnnotationsValidator />
                        <MudCard Elevation="0">
                            <MudCardContent>
                                <MudSelect @bind-Value="expense_model.Category" Label="@myText.Select_category" OpenIcon="@Icons.Filled.CurrencyExchange" AdornmentColor="Color.Primary">
                                    <MudSelectItem Value="@myText.Expense_Entertaiment" />
                                    <MudSelectItem Value="@myText.Expense_Education" />
                                    <MudSelectItem Value="@myText.Expense_Purchase" />
                                    <MudSelectItem Value="@myText.Expense_Personal" />
                                    <MudSelectItem Value="@myText.Expense_Health" />
                                    <MudSelectItem Value="@myText.Expense_Invest" />
                                    <MudSelectItem Value="@myText.Expense_Kids" />
                                    <MudSelectItem Value="@myText.Expense_Invoices" />
                                    <MudSelectItem Value="@myText.Expense_Taxes" />
                                    <MudSelectItem Value="@myText.Expense_Services" />
                                    <MudSelectItem Value="@myText.Expense_Food" />
                                    <MudSelectItem Value="@myText.Expense_Travel" />
                                    <MudSelectItem Value="@myText.Expense_Home" />
                                    <MudSelectItem Value="@myText.Expense_Electricity" />
                                    <MudSelectItem Value="@myText.Expense_Communications" />
                                </MudSelect>
                                <MudTextField Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.AttachMoney" AdornmentColor="Color.Primary" T="decimal" For="@(() => expense_model.Amount)" Label="@myText.Ammount" @bind-Value="@expense_model.Amount" />
                                <MudDatePicker DisableToolbar="true" DateFormat="dd/MM/yyyy" Placeholder="@myText.Select_Date" Editable="true" Label="@myText.Date" For="@(() => expense_model.Date)" @bind-Date="@expense_model.Date" AdornmentColor="Color.Primary" />
                                <MudTextField Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Description" T="string" Lines="3" For="@(() => expense_model.Details)" Label="@myText.Details" @bind-Value="@expense_model.Details" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">@myText.Btn_Accept</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </EditForm>
                }
            }
        </MudPaper>
    </MudContainer>
</div>


@code {
    [Parameter] public Accounting accounting { get; set; }
    [Parameter] public EventCallback GoBack { get; set; }

    bool adding_expense, editing_expense = false;
    private Expense expense_model;

    Text myText = new Text();
    protected override async Task OnInitializedAsync()
    {
        myText = await translator.GetTextTableAsync<Text>(this);
        expense_model = new Expense() { Category = myText.Expense_Invoices,Date = DateTime.Now };
    }

    async Task Cancel()
    {
        adding_expense = false;
        editing_expense = false;
        expense_model = new Expense() { Category = myText.Expense_Invoices, Date = DateTime.Now };
    }

    async Task AddExpense()
    {
        try
        {
            if (adding_expense)
            {
                accounting.Expenses.Add(expense_model);
                expense_model = new Expense() { Category = myText.Expense_Invoices, Date = DateTime.Now };
                editing_expense = false;
                adding_expense = false;
                Snackbar.Add(myText.Expense_inserted, MudBlazor.Severity.Success);
            }
            if (editing_expense)
            {
                editing_expense = false;
                adding_expense = false;
                expense_model = new Expense() { Category = myText.Expense_Invoices, Date = DateTime.Now };
                Snackbar.Add(myText.Expense_updated, MudBlazor.Severity.Warning);
            }
            await manage.SaveAccountingData(accounting);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    async Task EditExpense(Expense item)
    {
        adding_expense = false;
        editing_expense = true;
        expense_model = item;
    }

    async Task DeleteExpense(Expense item)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", myText.Expense_delete_question);
        parameters.Add("ButtonText", myText.Btn_delete);
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteItemDialog>(myText.Header_Delete, parameters, options);
        //var dialog = DialogService.Show<EducationDataDialog>("Deleting account", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            accounting.Expenses.Remove(item);
            await manage.SaveAccountingData(accounting);
            Snackbar.Add(myText.Expense_deleted, MudBlazor.Severity.Error);
        }
    }

}