@inject IDialogService DialogService
@inject ISnackbar Snackbar
<MudText Class="mt-2 ml-2" Typo="Typo.h6">Accounts</MudText>
@if (accounting.Accounts.Count == 0)
{
    adding_account = editing_account = true;
    <EditForm OnValidSubmit="AddAccount" Model="@account_model">
        <DataAnnotationsValidator />
        <MudCard Elevation="0">
            <MudCardContent>
                <MudTextField Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.AccountBalanceWallet" T="string" For="@(() => account_model.Name)" Label="Account" @bind-Value="@account_model.Name" />
                <MudTextField Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.AttachMoney" T="decimal" For="@(() => account_model.Initial)" Label="Initial amount" @bind-Value="@account_model.Initial" />
                <MudSelect @bind-Value="account_model.Currency" AdornmentColor="Color.Primary" Label="Select currency" OpenIcon="@Icons.Filled.AttachMoney">
                    @foreach (Currency item in Enum.GetValues(typeof(Currency)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">ACCEPT</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}
else
{
    @if (!editing_account)
    {
        <MudButton OnClick="(() => editing_account = adding_account = true)" Class="mt-2" Variant="Variant.Text" Color="Color.Primary">New</MudButton>
        @foreach (var accounts in accounting.Accounts)
        {
            <MudPaper Outlined="true" Class="mt-1 d-flex align-center pa-2">
                <MudGrid Class="m-1">
                    <MudItem Class="align-self-center cursor-pointer" @onclick="@(() => EditAccount(accounts))">
                        <MudAvatar Color="Color.Primary">
                            <MudIcon Icon="@Icons.Filled.AttachMoney" />
                        </MudAvatar>
                    </MudItem>
                    <MudItem Class="align-self-center cursor-pointer" @onclick="@(() => EditAccount(accounts))">
                        <MudGrid>
                            <MudItem>
                                <MudText Typo="Typo.subtitle2"><b>@accounts.Currency</b></MudText>
                                <MudText Typo="Typo.subtitle2">@accounts.Name</MudText>
                                <MudText Typo="Typo.caption">@accounts.Initial</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudSpacer />
                    <MudItem Class="align-self-center pa-1" Style="width: 50px; height: 50px;">
                        <MudIconButton @onclick="@(() => DeleteAccount(accounts))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }
    }
    else
    {
        <MudButton Variant="Variant.Text" OnClick="@(() => Cancel())" Color="Color.Primary">Back</MudButton>
        <EditForm OnValidSubmit="AddAccount" Model="@account_model">
            <DataAnnotationsValidator />
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.AccountBalanceWallet" T="string" For="@(() => account_model.Name)" Label="Account" @bind-Value="@account_model.Name" />
                    <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.AttachMoney" T="decimal" For="@(() => account_model.Initial)" Label="Initial amount" @bind-Value="@account_model.Initial" />
                    <MudSelect @bind-Value="account_model.Currency" Label="Select currency" HelperText="Enum" OpenIcon="@Icons.Filled.AttachMoney" AdornmentColor="Color.Secondary">
                        @foreach (Currency item in Enum.GetValues(typeof(Currency)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">ACCEPT</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
}


@code {
    bool adding_account, editing_account = false;
    private Account account_model = new Account();
    [Parameter] public Accounting accounting { get; set; }

    async Task Cancel()
    {
        adding_account = false;
        editing_account = false;
        account_model = new Account();
    }

    async Task AddAccount()
    {
        try
        {
            if (adding_account)
            {
                accounting.Accounts.Add(account_model);
                account_model = new Account();
                editing_account = false;
                adding_account = false;
                Snackbar.Add("Account inserted", MudBlazor.Severity.Success);
            }
            if (editing_account)
            {
                editing_account = false;
                adding_account = false;
                account_model = new Account();
                Snackbar.Add("Account updated", MudBlazor.Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    async Task EditAccount(Account item)
    {
        adding_account = false;
        editing_account = true;
        account_model = item;
    }

    async Task DeleteAccount(Account item)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete these account {item.Name}?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteItemDialog>("Delete", parameters, options);
        //var dialog = DialogService.Show<EducationDataDialog>("Deleting account", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            accounting.Accounts.Remove(item);
            Snackbar.Add("Account deleted", MudBlazor.Severity.Error);
        }
    }

}
