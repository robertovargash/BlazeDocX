@using System.Globalization;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AccountingManager manage

<MudPaper Class="mt-2 mb-2 pa-2 mud-theme-secondary">
    <MudText Typo="Typo.h6">Expenses</MudText>
</MudPaper>
@if (accounting.Expenses.Count == 0)
{
    adding_expense = editing_expense = true;
    <EditForm OnValidSubmit="AddExpense" Model="@expense_model">
        <DataAnnotationsValidator />
        <MudCard Elevation="0">
            <MudCardContent>
                <MudSelect @bind-Value="expense_model.Category" Label="Select category" OpenIcon="@Icons.Filled.CurrencyExchange" AdornmentColor="Color.Primary">
                    @foreach (ExpenseCategory item in Enum.GetValues(typeof(ExpenseCategory)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.AttachMoney" AdornmentColor="Color.Primary" T="decimal" For="@(() => expense_model.Amount)" Label="Ammount" @bind-Value="@expense_model.Amount" />
                <MudDatePicker DisableToolbar="true" DateFormat="dd/MM/yyyy" Placeholder="Select Date" Editable="true" Label="Date" For="@(() => expense_model.Date)" @bind-Date="@expense_model.Date" AdornmentColor="Color.Primary" />
                <MudTextField Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Description" T="string" Lines="3" For="@(() => expense_model.Details)" Label="Details" @bind-Value="@expense_model.Details" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">ACCEPT</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}
else
{
    @if (!editing_expense)
    {
        <MudButton OnClick="(() => editing_expense = adding_expense = true)" Class="mt-2" Variant="Variant.Text" Color="Color.Primary">New</MudButton>
        <MudList Clickable="true" Class="m-1">
            @foreach (var expense in accounting.Expenses)
            {
                <MudDivider />
                <MudListItem Text="Inbox" OnClick="@(() => EditExpense(expense))">
                    <MudGrid Class="m-1">
                        <MudItem Class="align-self-center cursor-pointer">
                            <MudAvatar Color="Color.Primary">
                                @CultureInfo.CurrentCulture.NumberFormat.CurrencySymbol.ToString()
                            </MudAvatar>
                        </MudItem>
                        <MudItem Class="align-self-center cursor-pointer" Style="width: 60%;">
                            <MudText Typo="Typo.subtitle2">
                                <b>@expense.Category</b> @(expense.Date != null ? ((DateTime)expense.Date).ToString("d") : "No Date")
                            </MudText>
                            <MudText Typo="Typo.subtitle2">@expense.Amount.ToString("C2")</MudText>
                        </MudItem>
                        <MudSpacer />
                        <MudItem Class="align-self-center pa-1" Style="width: 50px; height: 50px;">
                            <MudIconButton @onclick="@(() => DeleteExpense(expense))" Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Secondary" />
                        </MudItem>
                    </MudGrid>
                </MudListItem>
            }
            <MudDivider />
        </MudList>
    }
    else
    {
        <MudButton Variant="Variant.Text" OnClick="@(() => Cancel())" Color="Color.Primary">Back</MudButton>
        <EditForm OnValidSubmit="AddExpense" Model="@expense_model">
            <DataAnnotationsValidator />
            <MudCard Elevation="0">
                <MudCardContent>
                    <MudSelect @bind-Value="expense_model.Category" Label="Select category" OpenIcon="@Icons.Filled.CurrencyExchange" AdornmentColor="Color.Primary">
                        @foreach (ExpenseCategory item in Enum.GetValues(typeof(ExpenseCategory)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.AttachMoney" AdornmentColor="Color.Primary" T="decimal" For="@(() => expense_model.Amount)" Label="Ammount" @bind-Value="@expense_model.Amount" />
                    <MudDatePicker DisableToolbar="true" DateFormat="dd/MM/yyyy" Placeholder="Select Date" Editable="true" Label="Date" For="@(() => expense_model.Date)" @bind-Date="@expense_model.Date" AdornmentColor="Color.Primary" />
                    <MudTextField Adornment="Adornment.End" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Description" T="string" Lines="3" For="@(() => expense_model.Details)" Label="Details" @bind-Value="@expense_model.Details" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" DisableElevation="true" Class="ml-auto">ACCEPT</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
}


@code {
    [Parameter] public Accounting accounting { get; set; }

    bool adding_expense, editing_expense = false;
    private Expense expense_model = new Expense() { Date = DateTime.Now };

    async Task Cancel()
    {
        adding_expense = false;
        editing_expense = false;
        expense_model = new Expense() { Date = DateTime.Now };
    }

    async Task AddExpense()
    {
        try
        {
            if (adding_expense)
            {
                accounting.Expenses.Add(expense_model);
                expense_model = new Expense() { Date = DateTime.Now };
                editing_expense = false;
                adding_expense = false;
                Snackbar.Add("Expense inserted", MudBlazor.Severity.Success);
            }
            if (editing_expense)
            {
                editing_expense = false;
                adding_expense = false;
                expense_model = new Expense() { Date = DateTime.Now };
                Snackbar.Add("Expense updated", MudBlazor.Severity.Warning);
            }
            await manage.SaveData(accounting);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
        }
    }

    async Task EditExpense(Expense item)
    {
        adding_expense = false;
        editing_expense = true;
        expense_model = item;
    }

    async Task DeleteExpense(Expense item)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete these expense?");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteItemDialog>("Delete", parameters, options);
        //var dialog = DialogService.Show<EducationDataDialog>("Deleting account", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            accounting.Expenses.Remove(item);
            await manage.SaveData(accounting);
            Snackbar.Add("Expense deleted", MudBlazor.Severity.Error);
        }
    }

}